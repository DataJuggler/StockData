
#region using statements

using DataAccessComponent.Controllers;
using DataAccessComponent.DataOperations;
using DataAccessComponent.Data;
using ObjectLibrary.BusinessObjects;
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;

#endregion

namespace DataAccessComponent.DataGateway
{

    #region class Gateway
    /// <summary>
    /// This class is used to manage DataOperations
    /// between the client and the DataAccessComponent.
    /// Do not change the method name or the parameters for the
    /// code generated methods or they will be recreated the next 
    /// time you code generate with DataTier.Net. If you need additional
    /// parameters passed to a method either create an override or
    /// add or set properties to the temp object that is passed in.
    /// </summary>
    public class Gateway
    {

        #region Private Variables
        private ApplicationController appController;
        private string connectionName;        
        #endregion

        #region Constructor
        /// <summary>
        /// Create a new instance of a Gateway object.
        /// </summary>
        public Gateway(string connectionName)
        {
            // store the ConnectionName
            ConnectionName = connectionName;

            // Perform Initializations for this object
            Init();
        }
        #endregion

        #region Methods
        
            #region DeleteAdmin(int id, Admin tempAdmin = null)
            /// <summary>
            /// This method is used to delete Admin objects.
            /// </summary>
            /// <param name="id">Delete the Admin with this id</param>
            /// <param name="tempAdmin">Pass in a tempAdmin to perform a custom delete.</param>
            public bool DeleteAdmin(int id, Admin tempAdmin = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempAdmin does not exist
                    if (tempAdmin == null)
                    {
                        // create a temp Admin
                        tempAdmin = new Admin();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempAdmin.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = AdminController.Delete(tempAdmin, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteDailyPriceData(int id, DailyPriceData tempDailyPriceData = null)
            /// <summary>
            /// This method is used to delete DailyPriceData objects.
            /// </summary>
            /// <param name="id">Delete the DailyPriceData with this id</param>
            /// <param name="tempDailyPriceData">Pass in a tempDailyPriceData to perform a custom delete.</param>
            public bool DeleteDailyPriceData(int id, DailyPriceData tempDailyPriceData = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempDailyPriceData does not exist
                    if (tempDailyPriceData == null)
                    {
                        // create a temp DailyPriceData
                        tempDailyPriceData = new DailyPriceData();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempDailyPriceData.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = DailyPriceDataController.Delete(tempDailyPriceData, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteDoNotTrack(int id, DoNotTrack tempDoNotTrack = null)
            /// <summary>
            /// This method is used to delete DoNotTrack objects.
            /// </summary>
            /// <param name="id">Delete the DoNotTrack with this id</param>
            /// <param name="tempDoNotTrack">Pass in a tempDoNotTrack to perform a custom delete.</param>
            public bool DeleteDoNotTrack(int id, DoNotTrack tempDoNotTrack = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempDoNotTrack does not exist
                    if (tempDoNotTrack == null)
                    {
                        // create a temp DoNotTrack
                        tempDoNotTrack = new DoNotTrack();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempDoNotTrack.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = DoNotTrackController.Delete(tempDoNotTrack, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteIndustry(int id, Industry tempIndustry = null)
            /// <summary>
            /// This method is used to delete Industry objects.
            /// </summary>
            /// <param name="id">Delete the Industry with this id</param>
            /// <param name="tempIndustry">Pass in a tempIndustry to perform a custom delete.</param>
            public bool DeleteIndustry(int id, Industry tempIndustry = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempIndustry does not exist
                    if (tempIndustry == null)
                    {
                        // create a temp Industry
                        tempIndustry = new Industry();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempIndustry.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = IndustryController.Delete(tempIndustry, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteIndustryHistory(int id, IndustryHistory tempIndustryHistory = null)
            /// <summary>
            /// This method is used to delete IndustryHistory objects.
            /// </summary>
            /// <param name="id">Delete the IndustryHistory with this id</param>
            /// <param name="tempIndustryHistory">Pass in a tempIndustryHistory to perform a custom delete.</param>
            public bool DeleteIndustryHistory(int id, IndustryHistory tempIndustryHistory = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempIndustryHistory does not exist
                    if (tempIndustryHistory == null)
                    {
                        // create a temp IndustryHistory
                        tempIndustryHistory = new IndustryHistory();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempIndustryHistory.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = IndustryHistoryController.Delete(tempIndustryHistory, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteRecommendationLog(int id, RecommendationLog tempRecommendationLog = null)
            /// <summary>
            /// This method is used to delete RecommendationLog objects.
            /// </summary>
            /// <param name="id">Delete the RecommendationLog with this id</param>
            /// <param name="tempRecommendationLog">Pass in a tempRecommendationLog to perform a custom delete.</param>
            public bool DeleteRecommendationLog(int id, RecommendationLog tempRecommendationLog = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempRecommendationLog does not exist
                    if (tempRecommendationLog == null)
                    {
                        // create a temp RecommendationLog
                        tempRecommendationLog = new RecommendationLog();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempRecommendationLog.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = RecommendationLogController.Delete(tempRecommendationLog, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteSector(int id, Sector tempSector = null)
            /// <summary>
            /// This method is used to delete Sector objects.
            /// </summary>
            /// <param name="id">Delete the Sector with this id</param>
            /// <param name="tempSector">Pass in a tempSector to perform a custom delete.</param>
            public bool DeleteSector(int id, Sector tempSector = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempSector does not exist
                    if (tempSector == null)
                    {
                        // create a temp Sector
                        tempSector = new Sector();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempSector.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = SectorController.Delete(tempSector, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteSectorHistory(int id, SectorHistory tempSectorHistory = null)
            /// <summary>
            /// This method is used to delete SectorHistory objects.
            /// </summary>
            /// <param name="id">Delete the SectorHistory with this id</param>
            /// <param name="tempSectorHistory">Pass in a tempSectorHistory to perform a custom delete.</param>
            public bool DeleteSectorHistory(int id, SectorHistory tempSectorHistory = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempSectorHistory does not exist
                    if (tempSectorHistory == null)
                    {
                        // create a temp SectorHistory
                        tempSectorHistory = new SectorHistory();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempSectorHistory.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = SectorHistoryController.Delete(tempSectorHistory, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteStock(int id, Stock tempStock = null)
            /// <summary>
            /// This method is used to delete Stock objects.
            /// </summary>
            /// <param name="id">Delete the Stock with this id</param>
            /// <param name="tempStock">Pass in a tempStock to perform a custom delete.</param>
            public bool DeleteStock(int id, Stock tempStock = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempStock does not exist
                    if (tempStock == null)
                    {
                        // create a temp Stock
                        tempStock = new Stock();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempStock.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = StockController.Delete(tempStock, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteStockDay(int id, StockDay tempStockDay = null)
            /// <summary>
            /// This method is used to delete StockDay objects.
            /// </summary>
            /// <param name="id">Delete the StockDay with this id</param>
            /// <param name="tempStockDay">Pass in a tempStockDay to perform a custom delete.</param>
            public bool DeleteStockDay(int id, StockDay tempStockDay = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempStockDay does not exist
                    if (tempStockDay == null)
                    {
                        // create a temp StockDay
                        tempStockDay = new StockDay();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempStockDay.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = StockDayController.Delete(tempStockDay, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region DeleteStockStreak(int id, StockStreak tempStockStreak = null)
            /// <summary>
            /// This method is used to delete StockStreak objects.
            /// </summary>
            /// <param name="id">Delete the StockStreak with this id</param>
            /// <param name="tempStockStreak">Pass in a tempStockStreak to perform a custom delete.</param>
            public bool DeleteStockStreak(int id, StockStreak tempStockStreak = null)
            {
                // initial value
                bool deleted = false;
        
                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempStockStreak does not exist
                    if (tempStockStreak == null)
                    {
                        // create a temp StockStreak
                        tempStockStreak = new StockStreak();
                    }
        
                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempStockStreak.UpdateIdentity(id);
                    }
        
                    // perform the delete
                    deleted = StockStreakController.Delete(tempStockStreak, DataManager);
                }
        
                // return value
                return deleted;
            }
            #endregion
        
            #region ExecuteNonQuery(string procedureName, SqlParameter[] sqlParameters)
            /// <summary>
            /// This method Executes a Non Query StoredProcedure
            /// </summary>
            public PolymorphicObject ExecuteNonQuery(string procedureName, SqlParameter[] sqlParameters)
            {
                // initial value
                PolymorphicObject returnValue = new PolymorphicObject();

                // locals
                List<PolymorphicObject> parameters = new List<PolymorphicObject>();

                // create the parameters
                PolymorphicObject procedureNameParameter = new PolymorphicObject();
                PolymorphicObject sqlParametersParameter = new PolymorphicObject();

                // if the procedureName exists
                if (!String.IsNullOrEmpty(procedureName))
                {
                    // Create an instance of the SystemMethods object
                    SystemMethods systemMethods = new SystemMethods();

                    // setup procedureNameParameter
                    procedureNameParameter.Name = "ProcedureName";
                    procedureNameParameter.Text = procedureName;

                    // setup sqlParametersParameter
                    sqlParametersParameter.Name = "SqlParameters";
                    sqlParametersParameter.ObjectValue = sqlParameters;

                    // Add these parameters to the parameters
                    parameters.Add(procedureNameParameter);
                    parameters.Add(sqlParametersParameter);

                    // get the dataConnector
                    DataAccessComponent.Data.DataConnector dataConnector = GetDataConnector();

                    // Execute the query
                    returnValue = systemMethods.ExecuteNonQuery(parameters, dataConnector);
                }

                // return value
                return returnValue;
            }
            #endregion

            #region FindAdmin(int id, Admin tempAdmin = null)
            /// <summary>
            /// This method is used to find 'Admin' objects.
            /// </summary>
            /// <param name="id">Find the Admin with this id</param>
            /// <param name="tempAdmin">Pass in a tempAdmin to perform a custom find.</param>
            public Admin FindAdmin(int id, Admin tempAdmin = null)
            {
                // initial value
                Admin admin = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempAdmin does not exist
                    if (tempAdmin == null)
                    {
                        // create a temp Admin
                        tempAdmin = new Admin();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempAdmin.UpdateIdentity(id);
                    }

                    // perform the find
                    admin = AdminController.Find(tempAdmin, DataManager);
                }

                // return value
                return admin;
            }
            #endregion

            #region FindDailyPriceData(int id, DailyPriceData tempDailyPriceData = null)
            /// <summary>
            /// This method is used to find 'DailyPriceData' objects.
            /// </summary>
            /// <param name="id">Find the DailyPriceData with this id</param>
            /// <param name="tempDailyPriceData">Pass in a tempDailyPriceData to perform a custom find.</param>
            public DailyPriceData FindDailyPriceData(int id, DailyPriceData tempDailyPriceData = null)
            {
                // initial value
                DailyPriceData dailyPriceData = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempDailyPriceData does not exist
                    if (tempDailyPriceData == null)
                    {
                        // create a temp DailyPriceData
                        tempDailyPriceData = new DailyPriceData();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempDailyPriceData.UpdateIdentity(id);
                    }

                    // perform the find
                    dailyPriceData = DailyPriceDataController.Find(tempDailyPriceData, DataManager);
                }

                // return value
                return dailyPriceData;
            }
            #endregion

            #region FindDailyPriceDataByStockDateAndSymbol(DateTime stockDate, string symbol)
            /// <summary>
            /// This method is used to find 'DailyPriceData' objects by StockDateAndSymbol
            /// </summary>
            public DailyPriceData FindDailyPriceDataByStockDateAndSymbol(DateTime stockDate, string symbol)
            {
                // initial value
                DailyPriceData dailyPriceData = null;
                
                // Create a temp DailyPriceData object
                DailyPriceData tempDailyPriceData = new DailyPriceData();
                
                // Set the value for FindByStockDateAndSymbol to true
                tempDailyPriceData.FindByStockDateAndSymbol = true;
                
                // Set the value for StockDate
                tempDailyPriceData.StockDate = stockDate;
                
                // Set the value for Symbol
                tempDailyPriceData.Symbol = symbol;
                
                // Perform the find
                dailyPriceData = FindDailyPriceData(0, tempDailyPriceData);
                
                // return value
                return dailyPriceData;
            }
            #endregion
            
            #region FindDailyPriceDataBySymbolAndMostRecent(bool mostRecent, string symbol)
            /// <summary>
            /// This method is used to find 'DailyPriceData' objects by SymbolAndMostRecent
            /// </summary>
            public DailyPriceData FindDailyPriceDataBySymbolAndMostRecent(bool mostRecent, string symbol)
            {
                // initial value
                DailyPriceData dailyPriceData = null;
                
                // Create a temp DailyPriceData object
                DailyPriceData tempDailyPriceData = new DailyPriceData();
                
                // Set the value for FindBySymbolAndMostRecent to true
                tempDailyPriceData.FindBySymbolAndMostRecent = true;
                
                // Set the value for MostRecent
                tempDailyPriceData.MostRecent = mostRecent;
                
                // Set the value for Symbol
                tempDailyPriceData.Symbol = symbol;
                
                // Perform the find
                dailyPriceData = FindDailyPriceData(0, tempDailyPriceData);
                
                // return value
                return dailyPriceData;
            }
            #endregion
            
            #region FindDailyPriceDataMaxStreakBySymbol(string symbol)
            /// <summary>
            /// This method is used to find 'DailyPriceData' objects for the Symbol given.
            /// </summary>
            public DailyPriceData FindDailyPriceDataMaxStreakBySymbol(string symbol)
            {
                // initial value
                DailyPriceData dailyPriceData = null;
                
                // Create a temp DailyPriceData object
                DailyPriceData tempDailyPriceData = new DailyPriceData();
                
                // Set the value for FindMaxStreakBySymbol to true
                tempDailyPriceData.FindMaxStreakBySymbol = true;
                
                // Using Symbol As symbol
                tempDailyPriceData.Symbol = symbol;
                
                // Perform the find
                dailyPriceData = FindDailyPriceData(0, tempDailyPriceData);
                
                // return value
                return dailyPriceData;
            }
            #endregion
            
            #region FindDoNotTrack(int id, DoNotTrack tempDoNotTrack = null)
            /// <summary>
            /// This method is used to find 'DoNotTrack' objects.
            /// </summary>
            /// <param name="id">Find the DoNotTrack with this id</param>
            /// <param name="tempDoNotTrack">Pass in a tempDoNotTrack to perform a custom find.</param>
            public DoNotTrack FindDoNotTrack(int id, DoNotTrack tempDoNotTrack = null)
            {
                // initial value
                DoNotTrack doNotTrack = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempDoNotTrack does not exist
                    if (tempDoNotTrack == null)
                    {
                        // create a temp DoNotTrack
                        tempDoNotTrack = new DoNotTrack();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempDoNotTrack.UpdateIdentity(id);
                    }

                    // perform the find
                    doNotTrack = DoNotTrackController.Find(tempDoNotTrack, DataManager);
                }

                // return value
                return doNotTrack;
            }
            #endregion

            #region FindDoNotTrackBySymbol(string symbol)
            /// <summary>
            /// This method is used to find 'DoNotTrack' objects for the Symbol given.
            /// </summary>
            public DoNotTrack FindDoNotTrackBySymbol(string symbol)
            {
                // initial value
                DoNotTrack doNotTrack = null;
                
                // Create a temp DoNotTrack object
                DoNotTrack tempDoNotTrack = new DoNotTrack();
                
                // Set the value for FindBySymbol to true
                tempDoNotTrack.FindBySymbol = true;
                
                // Using Symbol As symbol
                tempDoNotTrack.Symbol = symbol;
                
                // Perform the find
                doNotTrack = FindDoNotTrack(0, tempDoNotTrack);
                
                // return value
                return doNotTrack;
            }
            #endregion
            
            #region FindIndustry(int id, Industry tempIndustry = null)
            /// <summary>
            /// This method is used to find 'Industry' objects.
            /// </summary>
            /// <param name="id">Find the Industry with this id</param>
            /// <param name="tempIndustry">Pass in a tempIndustry to perform a custom find.</param>
            public Industry FindIndustry(int id, Industry tempIndustry = null)
            {
                // initial value
                Industry industry = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempIndustry does not exist
                    if (tempIndustry == null)
                    {
                        // create a temp Industry
                        tempIndustry = new Industry();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempIndustry.UpdateIdentity(id);
                    }

                    // perform the find
                    industry = IndustryController.Find(tempIndustry, DataManager);
                }

                // return value
                return industry;
            }
            #endregion

            #region FindIndustryHistory(int id, IndustryHistory tempIndustryHistory = null)
            /// <summary>
            /// This method is used to find 'IndustryHistory' objects.
            /// </summary>
            /// <param name="id">Find the IndustryHistory with this id</param>
            /// <param name="tempIndustryHistory">Pass in a tempIndustryHistory to perform a custom find.</param>
            public IndustryHistory FindIndustryHistory(int id, IndustryHistory tempIndustryHistory = null)
            {
                // initial value
                IndustryHistory industryHistory = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempIndustryHistory does not exist
                    if (tempIndustryHistory == null)
                    {
                        // create a temp IndustryHistory
                        tempIndustryHistory = new IndustryHistory();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempIndustryHistory.UpdateIdentity(id);
                    }

                    // perform the find
                    industryHistory = IndustryHistoryController.Find(tempIndustryHistory, DataManager);
                }

                // return value
                return industryHistory;
            }
            #endregion

            #region FindRecommendationLog(int id, RecommendationLog tempRecommendationLog = null)
            /// <summary>
            /// This method is used to find 'RecommendationLog' objects.
            /// </summary>
            /// <param name="id">Find the RecommendationLog with this id</param>
            /// <param name="tempRecommendationLog">Pass in a tempRecommendationLog to perform a custom find.</param>
            public RecommendationLog FindRecommendationLog(int id, RecommendationLog tempRecommendationLog = null)
            {
                // initial value
                RecommendationLog recommendationLog = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempRecommendationLog does not exist
                    if (tempRecommendationLog == null)
                    {
                        // create a temp RecommendationLog
                        tempRecommendationLog = new RecommendationLog();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempRecommendationLog.UpdateIdentity(id);
                    }

                    // perform the find
                    recommendationLog = RecommendationLogController.Find(tempRecommendationLog, DataManager);
                }

                // return value
                return recommendationLog;
            }
            #endregion

            #region FindSector(int id, Sector tempSector = null)
            /// <summary>
            /// This method is used to find 'Sector' objects.
            /// </summary>
            /// <param name="id">Find the Sector with this id</param>
            /// <param name="tempSector">Pass in a tempSector to perform a custom find.</param>
            public Sector FindSector(int id, Sector tempSector = null)
            {
                // initial value
                Sector sector = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempSector does not exist
                    if (tempSector == null)
                    {
                        // create a temp Sector
                        tempSector = new Sector();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempSector.UpdateIdentity(id);
                    }

                    // perform the find
                    sector = SectorController.Find(tempSector, DataManager);
                }

                // return value
                return sector;
            }
            #endregion

            #region FindSectorHistory(int id, SectorHistory tempSectorHistory = null)
            /// <summary>
            /// This method is used to find 'SectorHistory' objects.
            /// </summary>
            /// <param name="id">Find the SectorHistory with this id</param>
            /// <param name="tempSectorHistory">Pass in a tempSectorHistory to perform a custom find.</param>
            public SectorHistory FindSectorHistory(int id, SectorHistory tempSectorHistory = null)
            {
                // initial value
                SectorHistory sectorHistory = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempSectorHistory does not exist
                    if (tempSectorHistory == null)
                    {
                        // create a temp SectorHistory
                        tempSectorHistory = new SectorHistory();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempSectorHistory.UpdateIdentity(id);
                    }

                    // perform the find
                    sectorHistory = SectorHistoryController.Find(tempSectorHistory, DataManager);
                }

                // return value
                return sectorHistory;
            }
            #endregion

            #region FindStock(int id, Stock tempStock = null)
            /// <summary>
            /// This method is used to find 'Stock' objects.
            /// </summary>
            /// <param name="id">Find the Stock with this id</param>
            /// <param name="tempStock">Pass in a tempStock to perform a custom find.</param>
            public Stock FindStock(int id, Stock tempStock = null)
            {
                // initial value
                Stock stock = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempStock does not exist
                    if (tempStock == null)
                    {
                        // create a temp Stock
                        tempStock = new Stock();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempStock.UpdateIdentity(id);
                    }

                    // perform the find
                    stock = StockController.Find(tempStock, DataManager);
                }

                // return value
                return stock;
            }
            #endregion

            #region FindStockBySymbol(string symbol)
            /// <summary>
            /// This method is used to find 'Stock' objects for the Symbol given.
            /// </summary>
            public Stock FindStockBySymbol(string symbol)
            {
                // initial value
                Stock stock = null;
                
                // Create a temp Stock object
                Stock tempStock = new Stock();
                
                // Set the value for FindBySymbol to true
                tempStock.FindBySymbol = true;
                
                // Using Symbol As symbol
                tempStock.Symbol = symbol;
                
                // Perform the find
                stock = FindStock(0, tempStock);
                
                // return value
                return stock;
            }
            #endregion
            
            #region FindStockDay(int id, StockDay tempStockDay = null)
            /// <summary>
            /// This method is used to find 'StockDay' objects.
            /// </summary>
            /// <param name="id">Find the StockDay with this id</param>
            /// <param name="tempStockDay">Pass in a tempStockDay to perform a custom find.</param>
            public StockDay FindStockDay(int id, StockDay tempStockDay = null)
            {
                // initial value
                StockDay stockDay = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempStockDay does not exist
                    if (tempStockDay == null)
                    {
                        // create a temp StockDay
                        tempStockDay = new StockDay();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempStockDay.UpdateIdentity(id);
                    }

                    // perform the find
                    stockDay = StockDayController.Find(tempStockDay, DataManager);
                }

                // return value
                return stockDay;
            }
            #endregion

            #region FindStockStreak(int id, StockStreak tempStockStreak = null)
            /// <summary>
            /// This method is used to find 'StockStreak' objects.
            /// </summary>
            /// <param name="id">Find the StockStreak with this id</param>
            /// <param name="tempStockStreak">Pass in a tempStockStreak to perform a custom find.</param>
            public StockStreak FindStockStreak(int id, StockStreak tempStockStreak = null)
            {
                // initial value
                StockStreak stockStreak = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // if the tempStockStreak does not exist
                    if (tempStockStreak == null)
                    {
                        // create a temp StockStreak
                        tempStockStreak = new StockStreak();
                    }

                    // if the id is set
                    if (id > 0)
                    {
                        // set the primary key
                        tempStockStreak.UpdateIdentity(id);
                    }

                    // perform the find
                    stockStreak = StockStreakController.Find(tempStockStreak, DataManager);
                }

                // return value
                return stockStreak;
            }
            #endregion

            #region FindStockStreakByStockIdAndCurrentStreak(bool currentStreak, int stockId)
            /// <summary>
            /// This method is used to find 'StockStreak' objects by StockIdAndCurrentStreak
            /// </summary>
            public StockStreak FindStockStreakByStockIdAndCurrentStreak(bool currentStreak, int stockId)
            {
                // initial value
                StockStreak stockStreak = null;
                
                // Create a temp StockStreak object
                StockStreak tempStockStreak = new StockStreak();
                
                // Set the value for FindByStockIdAndCurrentStreak to true
                tempStockStreak.FindByStockIdAndCurrentStreak = true;
                
                // Set the value for CurrentStreak
                tempStockStreak.CurrentStreak = currentStreak;
                
                // Set the value for StockId
                tempStockStreak.StockId = stockId;
                
                // Perform the find
                stockStreak = FindStockStreak(0, tempStockStreak);
                
                // return value
                return stockStreak;
            }
            #endregion
            
            #region GetDataConnector()
            /// <summary>
            /// This method (safely) returns the Data Connector from the
            /// AppController.DataBridget.DataManager.DataConnector
            /// </summary>
            private DataConnector GetDataConnector()
            {
                // initial value
                DataConnector dataConnector = null;

                // if the AppController exists
                if (AppController != null)
                {
                    // return the DataConnector from the AppController
                    dataConnector = AppController.GetDataConnector();
                }

                // return value
                return dataConnector;
            }
            #endregion

            #region GetLastException()
            /// <summary>
            /// This method returns the last Exception from the AppController if one exists.
            /// Always test for null before refeferencing the Exception returned as it will be null 
            /// if no errors were encountered.
            /// </summary>
            /// <returns></returns>
            public Exception GetLastException()
            {
                // initial value
                Exception exception = null;

                // If the AppController object exists
                if (HasAppController)
                {
                    // return the Exception from the AppController
                    exception = AppController.Exception;

                    // Set to null after the exception is retrieved so it does not return again
                    AppController.Exception = null;
                }

                // return value
                return exception;
            }
            #endregion

            #region Init()
            /// <summary>
            /// Perform Initializations for this object.
            /// </summary>
            private void Init()
            {
                // Create Application Controller
                AppController = new ApplicationController(ConnectionName);
            }
            #endregion

            #region LoadAdmins(Admin tempAdmin = null)
            /// <summary>
            /// This method loads a collection of 'Admin' objects.
            /// </summary>
            public List<Admin> LoadAdmins(Admin tempAdmin = null)
            {
                // initial value
                List<Admin> admins = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    admins = AdminController.FetchAll(tempAdmin, DataManager);
                }

                // return value
                return admins;
            }
            #endregion

            #region LoadDailyPriceDatas(DailyPriceData tempDailyPriceData = null)
            /// <summary>
            /// This method loads a collection of 'DailyPriceData' objects.
            /// </summary>
            public List<DailyPriceData> LoadDailyPriceDatas(DailyPriceData tempDailyPriceData = null)
            {
                // initial value
                List<DailyPriceData> dailyPriceDatas = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    dailyPriceDatas = DailyPriceDataController.FetchAll(tempDailyPriceData, DataManager);
                }

                // return value
                return dailyPriceDatas;
            }
            #endregion

            #region LoadDailyPriceDatasForSymbol(string symbol)
            /// <summary>
            /// This method is used to load 'DailyPriceData' objects for the Symbol given.
            /// </summary>
            public List<DailyPriceData> LoadDailyPriceDatasForSymbol(string symbol)
            {
                // initial value
                List<DailyPriceData> dailyPriceDatas = null;
                
                // Create a temp DailyPriceData object
                DailyPriceData tempDailyPriceData = new DailyPriceData();
                
                // Set the value for LoadBySymbol to true
                tempDailyPriceData.LoadBySymbol = true;
                
                // Using Symbol As symbol
                tempDailyPriceData.Symbol = symbol;
                
                // Perform the load
                dailyPriceDatas = LoadDailyPriceDatas(tempDailyPriceData);
                
                // return value
                return dailyPriceDatas;
            }
            #endregion
            
            #region LoadDailyPriceDataViews(DailyPriceDataView tempDailyPriceDataView = null)
            /// <summary>
            /// This method loads a collection of 'DailyPriceDataView' objects.
            /// </summary>
            public List<DailyPriceDataView> LoadDailyPriceDataViews(DailyPriceDataView tempDailyPriceDataView = null)
            {
                // initial value
                List<DailyPriceDataView> dailyPriceDataViews = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    dailyPriceDataViews = DailyPriceDataViewController.FetchAll(tempDailyPriceDataView, DataManager);
                }

                // return value
                return dailyPriceDataViews;
            }
            #endregion

            #region LoadDoNotTracks(DoNotTrack tempDoNotTrack = null)
            /// <summary>
            /// This method loads a collection of 'DoNotTrack' objects.
            /// </summary>
            public List<DoNotTrack> LoadDoNotTracks(DoNotTrack tempDoNotTrack = null)
            {
                // initial value
                List<DoNotTrack> doNotTracks = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    doNotTracks = DoNotTrackController.FetchAll(tempDoNotTrack, DataManager);
                }

                // return value
                return doNotTracks;
            }
            #endregion

            #region LoadIndustryHistorys(IndustryHistory tempIndustryHistory = null)
            /// <summary>
            /// This method loads a collection of 'IndustryHistory' objects.
            /// </summary>
            public List<IndustryHistory> LoadIndustryHistorys(IndustryHistory tempIndustryHistory = null)
            {
                // initial value
                List<IndustryHistory> industryHistorys = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    industryHistorys = IndustryHistoryController.FetchAll(tempIndustryHistory, DataManager);
                }

                // return value
                return industryHistorys;
            }
            #endregion

            #region LoadIndustryLosingStreakViews(IndustryLosingStreakView tempIndustryLosingStreakView = null)
            /// <summary>
            /// This method loads a collection of 'IndustryLosingStreakView' objects.
            /// </summary>
            public List<IndustryLosingStreakView> LoadIndustryLosingStreakViews(IndustryLosingStreakView tempIndustryLosingStreakView = null)
            {
                // initial value
                List<IndustryLosingStreakView> industryLosingStreakViews = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    industryLosingStreakViews = IndustryLosingStreakViewController.FetchAll(tempIndustryLosingStreakView, DataManager);
                }

                // return value
                return industryLosingStreakViews;
            }
            #endregion

            #region LoadIndustrys(Industry tempIndustry = null)
            /// <summary>
            /// This method loads a collection of 'Industry' objects.
            /// </summary>
            public List<Industry> LoadIndustrys(Industry tempIndustry = null)
            {
                // initial value
                List<Industry> industrys = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    industrys = IndustryController.FetchAll(tempIndustry, DataManager);
                }

                // return value
                return industrys;
            }
            #endregion

            #region LoadIndustrySummarys(IndustrySummary tempIndustrySummary = null)
            /// <summary>
            /// This method loads a collection of 'IndustrySummary' objects.
            /// </summary>
            public List<IndustrySummary> LoadIndustrySummarys(IndustrySummary tempIndustrySummary = null)
            {
                // initial value
                List<IndustrySummary> industrySummarys = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    industrySummarys = IndustrySummaryController.FetchAll(tempIndustrySummary, DataManager);
                }

                // return value
                return industrySummarys;
            }
            #endregion

            #region LoadIndustryViews(IndustryView tempIndustryView = null)
            /// <summary>
            /// This method loads a collection of 'IndustryView' objects.
            /// </summary>
            public List<IndustryView> LoadIndustryViews(IndustryView tempIndustryView = null)
            {
                // initial value
                List<IndustryView> industryViews = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    industryViews = IndustryViewController.FetchAll(tempIndustryView, DataManager);
                }

                // return value
                return industryViews;
            }
            #endregion

            #region LoadIndustryWinningStreakViews(IndustryWinningStreakView tempIndustryWinningStreakView = null)
            /// <summary>
            /// This method loads a collection of 'IndustryWinningStreakView' objects.
            /// </summary>
            public List<IndustryWinningStreakView> LoadIndustryWinningStreakViews(IndustryWinningStreakView tempIndustryWinningStreakView = null)
            {
                // initial value
                List<IndustryWinningStreakView> industryWinningStreakViews = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    industryWinningStreakViews = IndustryWinningStreakViewController.FetchAll(tempIndustryWinningStreakView, DataManager);
                }

                // return value
                return industryWinningStreakViews;
            }
            #endregion

            #region LoadMarketSummarys(MarketSummary tempMarketSummary = null)
            /// <summary>
            /// This method loads a collection of 'MarketSummary' objects.
            /// </summary>
            public List<MarketSummary> LoadMarketSummarys(MarketSummary tempMarketSummary = null)
            {
                // initial value
                List<MarketSummary> marketSummarys = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    marketSummarys = MarketSummaryController.FetchAll(tempMarketSummary, DataManager);
                }

                // return value
                return marketSummarys;
            }
            #endregion

            #region LoadRecommendationLogs(RecommendationLog tempRecommendationLog = null)
            /// <summary>
            /// This method loads a collection of 'RecommendationLog' objects.
            /// </summary>
            public List<RecommendationLog> LoadRecommendationLogs(RecommendationLog tempRecommendationLog = null)
            {
                // initial value
                List<RecommendationLog> recommendationLogs = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    recommendationLogs = RecommendationLogController.FetchAll(tempRecommendationLog, DataManager);
                }

                // return value
                return recommendationLogs;
            }
            #endregion

            #region LoadRecommendationViews(RecommendationView tempRecommendationView = null)
            /// <summary>
            /// This method loads a collection of 'RecommendationView' objects.
            /// </summary>
            public List<RecommendationView> LoadRecommendationViews(RecommendationView tempRecommendationView = null)
            {
                // initial value
                List<RecommendationView> recommendationViews = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    recommendationViews = RecommendationViewController.FetchAll(tempRecommendationView, DataManager);
                }

                // return value
                return recommendationViews;
            }
            #endregion

            #region LoadSectorHistorys(SectorHistory tempSectorHistory = null)
            /// <summary>
            /// This method loads a collection of 'SectorHistory' objects.
            /// </summary>
            public List<SectorHistory> LoadSectorHistorys(SectorHistory tempSectorHistory = null)
            {
                // initial value
                List<SectorHistory> sectorHistorys = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    sectorHistorys = SectorHistoryController.FetchAll(tempSectorHistory, DataManager);
                }

                // return value
                return sectorHistorys;
            }
            #endregion

            #region LoadSectors(Sector tempSector = null)
            /// <summary>
            /// This method loads a collection of 'Sector' objects.
            /// </summary>
            public List<Sector> LoadSectors(Sector tempSector = null)
            {
                // initial value
                List<Sector> sectors = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    sectors = SectorController.FetchAll(tempSector, DataManager);
                }

                // return value
                return sectors;
            }
            #endregion

            #region LoadSectorSummarys(SectorSummary tempSectorSummary = null)
            /// <summary>
            /// This method loads a collection of 'SectorSummary' objects.
            /// </summary>
            public List<SectorSummary> LoadSectorSummarys(SectorSummary tempSectorSummary = null)
            {
                // initial value
                List<SectorSummary> sectorSummarys = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    sectorSummarys = SectorSummaryController.FetchAll(tempSectorSummary, DataManager);
                }

                // return value
                return sectorSummarys;
            }
            #endregion

            #region LoadSectorViews(SectorView tempSectorView = null)
            /// <summary>
            /// This method loads a collection of 'SectorView' objects.
            /// </summary>
            public List<SectorView> LoadSectorViews(SectorView tempSectorView = null)
            {
                // initial value
                List<SectorView> sectorViews = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    sectorViews = SectorViewController.FetchAll(tempSectorView, DataManager);
                }

                // return value
                return sectorViews;
            }
            #endregion

            #region LoadStockDays(StockDay tempStockDay = null)
            /// <summary>
            /// This method loads a collection of 'StockDay' objects.
            /// </summary>
            public List<StockDay> LoadStockDays(StockDay tempStockDay = null)
            {
                // initial value
                List<StockDay> stockDays = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    stockDays = StockDayController.FetchAll(tempStockDay, DataManager);
                }

                // return value
                return stockDays;
            }
            #endregion

            #region LoadStocks(Stock tempStock = null)
            /// <summary>
            /// This method loads a collection of 'Stock' objects.
            /// </summary>
            public List<Stock> LoadStocks(Stock tempStock = null)
            {
                // initial value
                List<Stock> stocks = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    stocks = StockController.FetchAll(tempStock, DataManager);
                }

                // return value
                return stocks;
            }
            #endregion

            #region LoadStockStreaks(StockStreak tempStockStreak = null)
            /// <summary>
            /// This method loads a collection of 'StockStreak' objects.
            /// </summary>
            public List<StockStreak> LoadStockStreaks(StockStreak tempStockStreak = null)
            {
                // initial value
                List<StockStreak> stockStreaks = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    stockStreaks = StockStreakController.FetchAll(tempStockStreak, DataManager);
                }

                // return value
                return stockStreaks;
            }
            #endregion

            #region LoadStockStreakViews(StockStreakView tempStockStreakView = null)
            /// <summary>
            /// This method loads a collection of 'StockStreakView' objects.
            /// </summary>
            public List<StockStreakView> LoadStockStreakViews(StockStreakView tempStockStreakView = null)
            {
                // initial value
                List<StockStreakView> stockStreakViews = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    stockStreakViews = StockStreakViewController.FetchAll(tempStockStreakView, DataManager);
                }

                // return value
                return stockStreakViews;
            }
            #endregion

            #region LoadTopLosingStreakStocks(TopLosingStreakStocks tempTopLosingStreakStocks = null)
            /// <summary>
            /// This method loads a collection of 'TopLosingStreakStocks' objects.
            /// </summary>
            public List<TopLosingStreakStocks> LoadTopLosingStreakStocks(TopLosingStreakStocks tempTopLosingStreakStocks = null)
            {
                // initial value
                List<TopLosingStreakStocks> topLosingStreakStocks = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    topLosingStreakStocks = TopLosingStreakStocksController.FetchAll(tempTopLosingStreakStocks, DataManager);
                }

                // return value
                return topLosingStreakStocks;
            }
            #endregion

            #region LoadTopStreakStocks(TopStreakStocks tempTopStreakStocks = null)
            /// <summary>
            /// This method loads a collection of 'TopStreakStocks' objects.
            /// </summary>
            public List<TopStreakStocks> LoadTopStreakStocks(TopStreakStocks tempTopStreakStocks = null)
            {
                // initial value
                List<TopStreakStocks> topStreakStocks = null;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the load
                    topStreakStocks = TopStreakStocksController.FetchAll(tempTopStreakStocks, DataManager);
                }

                // return value
                return topStreakStocks;
            }
            #endregion

            #region SaveAdmin(ref Admin admin)
            /// <summary>
            /// This method is used to save 'Admin' objects.
            /// </summary>
            /// <param name="admin">The Admin to save.</param>
            public bool SaveAdmin(ref Admin admin)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = AdminController.Save(ref admin, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveDailyPriceData(ref DailyPriceData dailyPriceData)
            /// <summary>
            /// This method is used to save 'DailyPriceData' objects.
            /// </summary>
            /// <param name="dailyPriceData">The DailyPriceData to save.</param>
            public bool SaveDailyPriceData(ref DailyPriceData dailyPriceData)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = DailyPriceDataController.Save(ref dailyPriceData, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveDoNotTrack(ref DoNotTrack doNotTrack)
            /// <summary>
            /// This method is used to save 'DoNotTrack' objects.
            /// </summary>
            /// <param name="doNotTrack">The DoNotTrack to save.</param>
            public bool SaveDoNotTrack(ref DoNotTrack doNotTrack)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = DoNotTrackController.Save(ref doNotTrack, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveIndustry(ref Industry industry)
            /// <summary>
            /// This method is used to save 'Industry' objects.
            /// </summary>
            /// <param name="industry">The Industry to save.</param>
            public bool SaveIndustry(ref Industry industry)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = IndustryController.Save(ref industry, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveIndustryHistory(ref IndustryHistory industryHistory)
            /// <summary>
            /// This method is used to save 'IndustryHistory' objects.
            /// </summary>
            /// <param name="industryHistory">The IndustryHistory to save.</param>
            public bool SaveIndustryHistory(ref IndustryHistory industryHistory)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = IndustryHistoryController.Save(ref industryHistory, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveRecommendationLog(ref RecommendationLog recommendationLog)
            /// <summary>
            /// This method is used to save 'RecommendationLog' objects.
            /// </summary>
            /// <param name="recommendationLog">The RecommendationLog to save.</param>
            public bool SaveRecommendationLog(ref RecommendationLog recommendationLog)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = RecommendationLogController.Save(ref recommendationLog, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveSector(ref Sector sector)
            /// <summary>
            /// This method is used to save 'Sector' objects.
            /// </summary>
            /// <param name="sector">The Sector to save.</param>
            public bool SaveSector(ref Sector sector)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = SectorController.Save(ref sector, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveSectorHistory(ref SectorHistory sectorHistory)
            /// <summary>
            /// This method is used to save 'SectorHistory' objects.
            /// </summary>
            /// <param name="sectorHistory">The SectorHistory to save.</param>
            public bool SaveSectorHistory(ref SectorHistory sectorHistory)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = SectorHistoryController.Save(ref sectorHistory, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveStock(ref Stock stock)
            /// <summary>
            /// This method is used to save 'Stock' objects.
            /// </summary>
            /// <param name="stock">The Stock to save.</param>
            public bool SaveStock(ref Stock stock)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = StockController.Save(ref stock, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveStockDay(ref StockDay stockDay)
            /// <summary>
            /// This method is used to save 'StockDay' objects.
            /// </summary>
            /// <param name="stockDay">The StockDay to save.</param>
            public bool SaveStockDay(ref StockDay stockDay)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = StockDayController.Save(ref stockDay, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

            #region SaveStockStreak(ref StockStreak stockStreak)
            /// <summary>
            /// This method is used to save 'StockStreak' objects.
            /// </summary>
            /// <param name="stockStreak">The StockStreak to save.</param>
            public bool SaveStockStreak(ref StockStreak stockStreak)
            {
                // initial value
                bool saved = false;

                // if the AppController exists
                if (HasAppController)
                {
                    // perform the save
                    saved = StockStreakController.Save(ref stockStreak, DataManager);
                }

                // return value
                return saved;
            }
            #endregion

        #endregion

        #region Properties

            #region AppController
            /// <summary>
            /// This property gets or sets the value for 'AppController'.
            /// </summary>
            public ApplicationController AppController
            {
                get { return appController; }
                set { appController = value; }
            }
            #endregion

            #region ConnectionName
            /// <summary>
            /// This property gets or sets the value for 'ConnectionName'.
            /// </summary>
            public string ConnectionName
            {
                get { return connectionName; }
                set { connectionName = value; }
            }
            #endregion
            
            #region DataManager
            /// <summary>
            /// This read only property returns the value of DataManager from the object AppController.
            /// </summary>
            public DataManager DataManager
            {

                get
                {
                    // initial value
                    DataManager dataManager = null;

                    // if AppController exists
                    if (HasAppController)
                    {
                        // set the return value
                        dataManager = AppController.DataManager;
                    }

                    // return value
                    return dataManager;
                }
            }
            #endregion

            #region HasAppController
            /// <summary>
            /// This property returns true if this object has an 'AppController'.
            /// </summary>
            public bool HasAppController
            {
                get
                {
                    // initial value
                    bool hasAppController = (this.AppController != null);

                    // return value
                    return hasAppController;
                }
            }
            #endregion

            #region HasConnectionName
            /// <summary>
            /// This property returns true if the 'ConnectionName' exists.
            /// </summary>
            public bool HasConnectionName
            {
                get
                {
                    // initial value
                    bool hasConnectionName = (!String.IsNullOrEmpty(this.ConnectionName));
                    
                    // return value
                    return hasConnectionName;
                }
            }
            #endregion
            
            #region HasDataManager
            /// <summary>
            /// This property returns true if this object has a 'DataManager'.
            /// </summary>
            public bool HasDataManager
            {
                get
                {
                    // initial value
                    bool hasDataManager = (DataManager != null);

                    // return value
                    return hasDataManager;
                }
            }
            #endregion
            
        #endregion

    }
    #endregion

}
